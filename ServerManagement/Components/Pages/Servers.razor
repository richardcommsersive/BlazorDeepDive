@page "/servers"
@page "/servers/back_from/{cityName}"
@using ServerManagement.StateStore

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject OttawaOnlineServersStore OttawaOnlineServersStore
@inject MontrealOnlineServersStore MontrealOnlineServersStore
@inject HalifaxOnlineServersStore HalifaxOnlineServersStore
@inject CalgaryOnlineServersStore CalgaryOnlineServersStore
@inject IServersEFCoreRepository ServersEFCoreRepository

<h3>Servers</h3>
<br/>
<br/>
<<<<<<< HEAD

<CityListComponent 
    @ref="cityListComponent" 
    SelectCityCallback="HandleCitySelection"
    selectedCity="@this.selectedCity"></CityListComponent>

=======
<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)?"border-primary":"")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(() => { SelectCity(city); })">@city</button>
                    </div>
                </div>
                
            </div>
        }
    </div>
</div>
>>>>>>> parent of f249fdc (Extract city components)
<br />

<SearchBarComponent 
    @ref="searchBarComponent" 
    SearchServerCallback="HandleSearchServer"
    style="width:500px"></SearchBarComponent>

<br/>

<<<<<<< HEAD
<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent         
        CityName="@this.selectedCity"
        SearchFilter="@searchFilter"></ServerListComponent>
</CascadingValue>
=======
<ServerListComponent 
    @rendermode="InteractiveServer" 
    CityName="@this.selectedCity" ></ServerListComponent>
>>>>>>> parent of f249fdc (Extract city components)

<p>
    <a href="/servername" class="btn btn-primary">Add Server</a>
</p>

<<<<<<< HEAD
@code {
=======
@code {    

    private List<String> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";
>>>>>>> parent of f249fdc (Extract city components)

    [Parameter]
    public string? CityName { get; set; }

    private string selectedCity = "Toronto";
    private string searchFilter = "";

    private CityListComponent? cityListComponent;
    private SearchBarComponent? searchBarComponent;

<<<<<<< HEAD
=======
            //this.servers = ServersRepository.SearchServers(_serverFilter);
        }
    }
    

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;

        //this.servers = ServersRepository.GetServersByCity(this.selectedCity);        
    }
    
>>>>>>> parent of f249fdc (Extract city components)
    private void HandleSearch()
    {
        //this.servers = ServersEFCoreRepository.SearchServers(serverFilter);

        this.selectedCity = string.Empty;
    }

    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;

        this.searchFilter = string.Empty;
        searchBarComponent?.ClearFilter();
    }

    private void HandleSearchServer(string searchFilter)
    {
        this.searchFilter = searchFilter;

        cityListComponent?.ClearSelection();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (NavigationManager.Uri.Contains("back_from")
                && !string.IsNullOrWhiteSpace(CityName))
            {
                selectedCity = CityName;                

                StateHasChanged();
            }

            //Init state stores
            var serversToronto = ServersEFCoreRepository.GetServersByCity("Toronto");
            if (serversToronto is not null)            
                TorontoOnlineServersStore.SetNumbersServersOnline(serversToronto.Count(x => x.IsOnline));

            var serversMontreal = ServersEFCoreRepository.GetServersByCity("Montreal");
            if (serversMontreal is not null)
                MontrealOnlineServersStore.SetNumbersServersOnline(serversMontreal.Count(x => x.IsOnline));

            var serversOttawa = ServersEFCoreRepository.GetServersByCity("Ottawa");
            if (serversOttawa is not null)
                OttawaOnlineServersStore.SetNumbersServersOnline(serversOttawa.Count(x => x.IsOnline));
            
            var serversCalgary = ServersEFCoreRepository.GetServersByCity("Calgary");
            if (serversCalgary is not null)
                CalgaryOnlineServersStore.SetNumbersServersOnline(serversCalgary.Count(x => x.IsOnline));

            var serversHalifax = ServersEFCoreRepository.GetServersByCity("Halifax");
            if (serversHalifax is not null)
                HalifaxOnlineServersStore.SetNumbersServersOnline(serversHalifax.Count(x => x.IsOnline));
        }
    }
}
